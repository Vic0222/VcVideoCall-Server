syntax = "proto3";

option csharp_namespace = "VcGrpcService.Proto";

package chat;

// The greeting service definition.
service Chat {
  // Sends a greeting
  rpc Join(JoinRequest) returns (stream JoinResponse);
  rpc GetRooms(GetRoomsRequest) returns (GetRoomsResponse);
  rpc GetRoom(GetRoomRequest) returns (GetRoomResponse);
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
  rpc SendMessageRequest(MessageRequest) returns (MessageResponse);
  rpc SendCallOffer(CallOfferRequest) returns (CallOfferResponse);
  rpc SendCallAnswer(CallAnswerRequest) returns (CallAnswerResponse);
  rpc SendIceCandidate(IceCandidateRequest) returns (IceCandidateResponse);
  rpc SendPeerConnectionClose(PeerConnectionCloseRequest) returns (PeerConnectionCloseResponse);
  rpc SearchUser(SearchUserRequest) returns (SearchUserResponse);
  rpc SendUserInvite(UserInviteRequest) returns (UserInviteResponse);
  rpc SendUserAccept(UserAcceptRequest) returns (UserAcceptResponse);
}

message PeerConnectionCloseRequest {
  string room_id = 1;
}

message PeerConnectionCloseResponse {
}

message JoinRequest{
}


message JoinResponse{
  JoinResponseType type = 1;
  MessageNotification message_notification = 2;
  CallOfferNotification call_offer_notification = 3;
  IceCandidateNotification ice_candidate_notification = 4;
  PeerConnectionCloseNotification peer_connection_close_notification = 5;
}

enum JoinResponseType {
  Confirmation = 0;
  Notification = 1;
  CallSignaling = 2;
  IceCandidate = 3;
  PeerConnectionClose = 4;
}

message IceCandidateRequest {
  string room_id = 1;
  RtcIceCandidate rtc_ice_candidate = 2;
}

message IceCandidateResponse{
}

message RtcSessionDescription {
  string sdp = 1;
  string type = 2;
}

message IceCandidateNotification{
  string room_id = 1;
  RtcIceCandidate rtc_ice_candidate = 2;
}

message PeerConnectionCloseNotification{
  string room_id = 1;
}

message RtcIceCandidate {
  string candidate = 1;
  string sdpMid = 2;
  int32 sdpMlineIndex = 3;
}


message CallOfferRequest
{
  RtcSessionDescription rtc_session_description = 1;
  string room_id = 2;
}

message CallOfferResponse
{
  CallOfferStatus status = 1;
  RtcSessionDescription rtc_session_description = 2;
  string receiver_id = 3;
}

message CallAnswerRequest
{
  CallOfferStatus status = 1;
  RtcSessionDescription rtc_session_description = 2;
  string room_id = 3;
}

message CallAnswerResponse
{
}

message CallOfferNotification{
  string sender_id = 1;
  string room_id = 2;
  RtcSessionDescription rtc_session_description = 3;
}

enum CallOfferStatus{
	CallOfferRejected = 0;
	CallOfferAccepted = 1;
}



message CallSignal{
  CallSignalType type = 1;
  RtcSessionDescription rtc_session_description = 2;
}

enum CallSignalType{
	CallSignalOffer = 0;
	CallSignalAnswer = 1;
}

message MessageNotification {
  string room_id = 1;
  string sender_id = 2;
}

message MessageRequest {
  string room_id = 2;
  string message_body = 4;
}

message MessageResponse {
}

message GetRoomsRequest{
}

message GetRoomsResponse{
  repeated Room rooms = 1;
}

message GetRoomRequest{
  GetRoomType type = 1;
  string user_id = 2;
  string room_id = 3;
}

enum GetRoomType{
  GetRoomTypeFromUserIdPrivate = 0;
  GetRoomTypeFromRoomId = 1;
}

message GetRoomResponse{
  RoomStatus room_status = 1;
  Room room = 2;
}

enum RoomStatus{
  RoomNotExisting = 0;
  RoomInvitePending = 1;
  RoomAcceptPending = 2;
  RoomAccepted = 3;
}


message Room{
  string id = 1;
  string name = 2;
  RoomType type = 3;
  string last_message = 4;
  int64 last_message_datetime = 5;
  bool is_online = 6;
  string photo_url = 7;
  RoomStatus status = 8;
}

enum RoomType {
  RoomTypeUnknown = 0;
  RoomTypePrivate = 1;
  RoomTypeGroup = 2;
}

message GetMessagesRequest{
  string room_id = 1;
  int64 last_message_datetime = 2;
}

message GetMessagesResponse{
  repeated Message messages = 1;
  int64 last_message_datetime = 2;
}

message Message {
  string id = 1;
  string room_id = 2;
  string message_body = 3;
  string sender_id = 4;
  int64 date_sent = 5;
}

message SearchUserRequest{
	string keyword = 1;
}

message SearchUserResponse {
  repeated User users = 1;
}

message User {
  string user_id = 1;
  string email = 2;
  string username = 3;
  string photo_url = 4;
}

message UserInviteRequest {
  string user_id = 1;
}

message UserInviteResponse{
  Room room = 1;
}

message UserAcceptRequest {
  string room_id = 1;
}

message UserAcceptResponse{
  Room room = 1;
}